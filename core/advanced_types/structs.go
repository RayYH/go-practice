package advanced_types

import (
	"fmt"
	"math"
	"strings"
)

////////////////////////////////////////////////////////////////////////////////////////////////////////////

type IntContainer struct{ thing int }

func (b *IntContainer) change()         { b.thing = 1 }
func (b IntContainer) modify() int      { b.thing = 2; return b.thing }
func (b IntContainer) toString() string { return fmt.Sprint(b) }

////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////

type Camera struct{}
type Phone struct{}
type CameraPhone struct {
	Camera
	Phone
}

func (c *Camera) TakeAPicture() string {
	return "Click"
}

func (p *Phone) Call() string {
	return "Ring Ring"
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////

type Point struct{ x, y float64 }
type NamedPoint struct {
	Point
	name string
}

func (p *Point) Abs() float64 {
	return math.Sqrt(p.x*p.x + p.y*p.y)
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////

type Interval struct {
	start int
	end   int
}

// 1. Go 方法是作用在接收者 (receiver) 上的一个函数，接收者是某种类型的变量，因此方法是一种特殊类型的函数
// 2. 类型 T (或 *T) 上的所有方法的集合叫做类型 T (或 *T) 的方法集

func (i *Interval) duration() int {
	return i.end - i.start
}

func (i *Interval) durationInMillSeconds() int {
	return i.duration() * 1000
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////

type Person struct {
	firstName string
	lastName  string
}

/// Getters

func (p *Person) FirstName() string {
	return p.firstName
}

func (p *Person) LastName() string {
	return p.lastName
}

/// Setters

func (p *Person) SetFirstName(aFirstName string) {
	p.firstName = aFirstName
}

func (p *Person) SetLastName(aLastName string) {
	p.lastName = aLastName
}

/// Constructors

func NewPerson(firstName, lastName string) *Person {
	return &Person{firstName: firstName, lastName: lastName}
}

/// methods

func upperPerson(p *Person) {
	p.firstName = strings.ToUpper(p.firstName)
	p.lastName = strings.ToUpper(p.lastName)
}

/// String()

func (p Person) String() string {
	return fmt.Sprintf("%s %s", p.firstName, p.lastName)
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////

type Vertex struct{ X, Y float64 }

func (v *Vertex) Scale(f float64) {
	v.X = v.X * f
	v.Y = v.Y * f
}

func ScaleFunc(v *Vertex, f float64) {
	v.X = v.X * f
	v.Y = v.Y * f
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////

type IntVector []int

func (v IntVector) Sum() (s int) {
	for _, value := range v {
		s += value
	}
	return
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////

type Integer int

func (a Integer) LessThan(b Integer) bool {
	return a < b
}

func (a *Integer) Add(b Integer) { // 传递指针可以修改 a 的值
	*a += b
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////

type Log struct{ msg string }

func (l *Log) Add(s string)   { l.msg += "\n" + s }
func (l *Log) String() string { return l.msg }

// Customer 结构体包含了匿名结构体 Log
type Customer struct {
	Name string
	Log
}

func (c *Customer) String() string {
	return c.Name + "\nLog:" + fmt.Sprintln(c.Log)
}

// CustomerHoldsRef 结构体包含了 Log 结构体指针
type CustomerHoldsRef struct {
	Name string
	log  *Log
}

func (cwr *CustomerHoldsRef) Log() *Log {
	return cwr.log
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
